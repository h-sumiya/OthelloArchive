(function(){"use strict";let s,r=null;function l(){return(r===null||r.byteLength===0)&&(r=new Int32Array(s.memory.buffer)),r}const f=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&f.decode();let o=null;function y(){return(o===null||o.byteLength===0)&&(o=new Uint8Array(s.memory.buffer)),o}function _(e,t){return e=e>>>0,f.decode(y().subarray(e,e+t))}function b(){let e,t;try{const c=s.__wbindgen_add_to_stack_pointer(-16);s.version(c);var n=l()[c/4+0],a=l()[c/4+1];return e=n,t=a,_(n,a)}finally{s.__wbindgen_add_to_stack_pointer(16),s.__wbindgen_free(e,t,1)}}let i=null;function w(){return(i===null||i.byteLength===0)&&(i=new Uint32Array(s.memory.buffer)),i}let u=0;function g(e,t){const n=t(e.length*4,4)>>>0;return w().set(e,n/4),u=e.length,n}function m(e,t){const n=g(e,s.__wbindgen_malloc),a=u;return s.ai(n,a,t)>>>0}async function h(e,t){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,t)}catch(a){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",a);else throw a}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}else{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function p(){const e={};return e.wbg={},e}function A(e,t){return s=e.exports,d.__wbindgen_wasm_module=t,r=null,i=null,o=null,s}async function d(e){if(s!==void 0)return s;typeof e>"u"&&(e=new URL("/assets/webai_bg-4fb1a13d.wasm",self.location));const t=p();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:n,module:a}=await h(await e,t);return A(n,a)}let M=(async()=>{await d();const e=b();console.log(`othello ai web edition(${e}) is successfully loaded.`),self.postMessage({loaded:!0})})();self.onmessage=async e=>{await M;const{data:t,color:n}=e.data,a=m(t,n);self.postMessage(a)}})();
